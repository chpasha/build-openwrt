name: TP-Link WR1043ND-V1

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  RELEASE: "21.02.1"
  BOARD: "ath79"
  SUBTARGET: "generic"
  PROFILE: "tplink_tl-wr1043nd-v1"
  TARGET_FILE: "openwrt-ath79-generic-tplink_tl-wr1043nd-v1"
  PACKAGES_TYPE1: "luci nano -kmod-usb2 -kmod-usb-ledtrig-usbport -luci-proto-ppp -ppp -ppp-mod-pppoe -kmod-pppox -kmod-pppoe -kmod-ppp"
  PACKAGES_TYPE2: "luci nano wpad-mesh-wolfssl -wpad-basic-wolfssl -kmod-usb2 -kmod-usb-ledtrig-usbport -luci-proto-ppp -ppp -ppp-mod-pppoe -kmod-pppox -kmod-pppoe -kmod-ppp"
    
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        sudo mkdir -p /mnt/workdir/assets
        sudo chown $USER:$GROUPS /mnt/workdir/assets

    - name: Download imagebuilder
      working-directory: /mnt/workdir
      run: |
        curl -O "https://downloads.openwrt.org/releases/${{ env.RELEASE }}/targets/${{ env.BOARD }}/${{ env.SUBTARGET }}/openwrt-imagebuilder-${{ env.RELEASE }}-${{ env.BOARD }}-${{ env.SUBTARGET }}.Linux-x86_64.tar.xz"
        tar xvaf openwrt-imagebuilder-${{ env.RELEASE }}-${{ env.BOARD }}-${{ env.SUBTARGET }}.Linux-x86_64.tar.xz
        ln -sf /mnt/workdir/openwrt-imagebuilder-${{ env.RELEASE }}-${{ env.BOARD }}-${{ env.SUBTARGET }}.Linux-x86_64 $GITHUB_WORKSPACE/openwrt
 
    # Pull the first six letters from the version.buildinfo-file for naming the release e. g. "R16767"
    - name: Download version info
      run: |
        curl -O "https://downloads.openwrt.org/releases/${{ env.RELEASE }}/targets/${{ env.BOARD }}/${{ env.SUBTARGET }}/version.buildinfo"
        echo "OPENWRT_VERSION=$(cut -c-6 <<< cat version.buildinfo)" >> $GITHUB_ENV
        
        
    - name: Build the image of type 1
      id: type1
      run: |
        cd openwrt
        make image PROFILE="${{ env.PROFILE }}" PACKAGES="${{ env.PACKAGES_TYPE1 }}"
#        for f in /mnt/workdir/openwrt-imagebuilder*/build_dir/target-*/linux-*/tmp/*-sysupgrade.bin.new; do \
#          cp "$f" /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_sysupgrade.bin \
#        done
#        for f in /mnt/workdir/openwrt-imagebuilder*/build_dir/target-*/linux-*/tmp/*-factory.bin.new; do \
#          cp "$f" /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_factory.bin \
#        done

    - name: Zip artefacts #
      run: |
        zip -r ${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}.zip /mnt/workdir/openwrt-imagebuilder*/build_dir/target-*/linux-*/tmp/*

#    - name: Build the image of type 2
#      id: type2
#      run: |
#        cd openwrt
#        make image PROFILE="${{ env.PROFILE }}" PACKAGES="${{ env.PACKAGES_TYPE2 }}" EXTRA_IMAGE_NAME="MESH"
#        mv /mnt/workdir/openwrt-imagebuilder*/build_dir/target-*/linux-${{ env.BOARD }}_${{ env.SUBTARGET }}/tmp/*-sysupgrade.bin.new /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_MESH_sysupgrade.bin
#        mv /mnt/workdir/openwrt-imagebuilder*/build_dir/target-*/linux-${{ env.BOARD }}_${{ env.SUBTARGET }}/tmp/*-factory.bin.new /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_MESH_factory.bin

#    - name: Zip artefacts #
#      run: |
#        cd /mnt/workdir/assets/
#        zip -r ${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}.zip ./*.bin
#
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ env.OPENWRT_VERSION }}
#        release_name: ${{env.GITHUB_WORKFLOW}} (${{ env.OPENWRT_VERSION }})
#        body: |
#          This release is based on OpenWrt Release ${{ env.OPENWRT_VERSION }}.
#
#        draft: false
#        prerelease: false
#
#    - name: Upload type1 Asset
#      id: upload-release-asset-type1
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}.zip
#        asset_name: ${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}.zip
#        asset_content_type: application/zip

#    - name: Upload type2 Asset
#      id: upload-release-asset-type2
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: /mnt/workdir/assets/${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_MESH_sysupgrade.bin
#        asset_name: ${{ env.TARGET_FILE }}_${{ env.OPENWRT_VERSION }}_MESH_sysupgrade.bin
#        asset_content_type: application/bin
